name: Build and Upload OpenWrt IPK Packages

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: '源仓库 URL'
        default: 'https://github.com/padavanonly/immortalwrt-mt798x-24.10'
      repo_branch:
        description: '源仓库分支'
        default: 'openwrt-24.10-6.6'
      webdav_path:
        description: 'WebDAV 上传路径'
        default: '/ipk'

permissions:
  contents: write
  actions: write

env:
  REPO_URL: ${{ github.event.inputs.repo_url || 'https://github.com/padavanonly/immortalwrt-mt798x-24.10' }}
  REPO_BRANCH: ${{ github.event.inputs.repo_branch || 'openwrt-24.10-6.6' }}
  CONFIG_FILE: ipk.config
  WEBDAV_PATH: ${{ github.event.inputs.webdav_path || '/ipk' }}
  TZ: Asia/Shanghai
  WEBDAV_URL: ${{ secrets.WEBDAV_URL }}
  WEBDAV_USERNAME: ${{ secrets.WEBDAV_USERNAME }}
  WEBDAV_PASSWORD: ${{ secrets.WEBDAV_PASSWORD }}

jobs:
  build-ipk:
    runs-on: ubuntu-latest
    steps:
      - name: 调试信息
        run: |
          echo "触发方式: ${{ github.event_name }}"
          echo "源仓库: ${{ env.REPO_URL }} 分支: ${{ env.REPO_BRANCH }}"
          echo "WebDAV 路径: ${{ env.WEBDAV_PATH }}"

      - name: 检出代码
        uses: actions/checkout@v4

      - name: 检查磁盘空间
        run: |
          MIN_SPACE=10
          AVAILABLE=$(df --output=avail -B G . | tail -n 1 | tr -d ' ')
          if [ -z "$AVAILABLE" ] || [ "$AVAILABLE" -lt "$MIN_SPACE" ]; then
            echo "错误：磁盘空间不足，可用空间 ${AVAILABLE}G，需至少 ${MIN_SPACE}G"
            exit 1
          fi
          echo "可用磁盘空间：${AVAILABLE}G"

      - name: 初始化环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          sudo apt-get update -y
          sudo apt-get install -y \
            build-essential ccache cmake curl git gawk gcc-multilib g++-multilib \
            libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev \
            libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool \
            ninja-build python3 python3-pip python3-ply python3-docutils python3-pyelftools \
            rsync unzip vim wget zlib1g-dev squashfs-tools device-tree-compiler zstd \
            binutils bison flex gettext p7zip p7zip-full patch pkgconf \
            autopoint asciidoc xmlto texinfo
          sudo apt-get autoremove --purge -y
          sudo apt-get clean
          sudo timedatectl set-timezone "$TZ" || echo "警告：无法设置时区"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: 配置 ccache
        run: |
          echo "export PATH=/usr/lib/ccache:$PATH" >> $GITHUB_ENV
          echo "export CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
          ccache -M 5G
          ccache -c -z

      - name: 缓存 OpenWrt 源码和下载
        uses: actions/cache@v4
        with:
          path: |
            /workdir/openwrt
            /workdir/openwrt/dl
          key: openwrt-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-${{ hashFiles('ipk.config') }}
          restore-keys: openwrt-${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}-

      - name: 克隆源码
        working-directory: /workdir
        run: |
          if [ -d "/workdir/openwrt" ]; then
            echo "检测到 openwrt 目录已存在，正在清理..."
            rm -rf /workdir/openwrt
          fi
          for i in {1..5}; do
            git clone $REPO_URL -b $REPO_BRANCH openwrt && break
            echo "克隆失败，重试 $i/5"
            sleep 10
          done
          if [ ! -d "/workdir/openwrt" ]; then
            echo "错误：源码克隆失败"
            exit 1
          fi
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: 验证配置文件
        run: |
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "错误：未找到 $CONFIG_FILE"
            exit 1
          fi
          INVALID_CONFIG=$(grep -v '^CONFIG_PACKAGE_' $CONFIG_FILE || true)
          if [ -n "$INVALID_CONFIG" ]; then
            echo "错误：$CONFIG_FILE 包含无效配置：$INVALID_CONFIG"
            exit 1
          fi

      - name: 加载 Feeds
        timeout-minutes: 10
        run: |
          cd openwrt
          ./scripts/feeds update -a || { echo "更新 Feeds 失败"; exit 1; }
          ./scripts/feeds install -a || { echo "安装 Feeds 失败"; exit 1; }

      - name: 加载配置
        run: |
          mv $CONFIG_FILE openwrt/.config
          echo "CONFIG_TARGET_mediatek=y" >> openwrt/.config
          echo "CONFIG_TARGET_mediatek_filogic=y" >> openwrt/.config
          cd openwrt
          make defconfig

      - name: 显示将编译的模块
        run: |
          echo "将编译以下模块："
          grep '^CONFIG_PACKAGE_' openwrt/.config | sed 's/CONFIG_PACKAGE_/  - /;s/=y//'

      - name: 下载软件包
        timeout-minutes: 30
        run: |
          cd openwrt
          make download -j$(nproc) || { echo "下载软件包失败"; exit 1; }
          find dl -size -1024c -exec rm -f {} \; || echo "警告：无法清理 dl 目录中的小文件"

      - name: 提取版本号
        id: version
        run: |
          cd openwrt
          VERSION=$(grep -E "^DISTRIB_REVISION=" openwrt_release 2>/dev/null | cut -d"'" -f2 | sed 's/\(r[0-9]\+\).*/\1/' || echo "unknown")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: 编译 IPK 包
        timeout-minutes: 30
        run: |
          cd openwrt
          MODULES=$(grep '^CONFIG_PACKAGE_' .config | sed 's/CONFIG_PACKAGE_//;s/=y//')
          if [ -z "$MODULES" ]; then
            echo "错误：ipk.config 中未找到任何包"
            exit 1
          fi
          for MODULE in $MODULES; do
            if [ ! -d "package/$MODULE" ] && [ ! -d "feeds/*/$MODULE" ]; then
              echo "错误：模块 $MODULE 不存在于源码或 Feeds 中"
              exit 1
            fi
          done
          make package/{${MODULES// /,}}/{clean,compile} V=s
          make package/index

      - name: 上传编译日志
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: compile-log
          path: |
            openwrt/build_dir/**/*
            openwrt/logs/**/*
            openwrt/*.log

      - name: 验证 WebDAV 环境变量
        run: |
          if [ -z "${{ env.WEBDAV_URL }}" ] || [ -z "${{ env.WEBDAV_USERNAME }}" ] || [ -z "${{ env.WEBDAV_PASSWORD }}" ]; then
            echo "警告：WebDAV 环境变量未配置，跳过上传"
            echo "SKIP_WEBDAV=true" >> $GITHUB_ENV
          else
            echo "WebDAV 环境变量验证通过"
          fi

      - name: 上传 IPK 包到 WebDAV
        if: env.SKIP_WEBDAV != 'true'
        env:
          FILE_DATE: $(date +%Y%m%d)
        run: |
          set -e
          echo "正在查找 IPK 文件..."
          IPK_FILES=$(find openwrt/bin/packages -type f -name "*.ipk")
          if [ -z "$IPK_FILES" ]; then
            echo "未找到 IPK 文件，跳过上传"
            exit 0
          fi
          echo "找到文件: $IPK_FILES"
          for FILE in $IPK_FILES; do
            NEW_NAME="mediatek_filogic_${{ env.VERSION }}_$(basename "$FILE" | sed "s/\.\([^.]*\)$/-${{ env.FILE_DATE }}.\1/")"
            echo "上传: $FILE → $NEW_NAME"
            RESPONSE=$(curl --retry 3 --retry-delay 5 --connect-timeout 10 \
                   -u "${{ env.WEBDAV_USERNAME }}:${{ env.WEBDAV_PASSWORD }}" \
                   -T "$FILE" \
                   "${{ env.WEBDAV_URL }}${{ env.WEBDAV_PATH }}/$NEW_NAME" -w "%{http_code}" -o /dev/null || echo "failed")
            if [ "$RESPONSE" = "failed" ] || [ "$RESPONSE" -ne 201 ] && [ "$RESPONSE" -ne 204 ] && [ "$RESPONSE" -ne 200 ]; then
              echo "上传失败: $NEW_NAME (HTTP 状态码: $RESPONSE)"
              exit 1
            fi
            echo "上传成功: $NEW_NAME"
          done
          echo "上传完成！"

      - name: 上传 IPK 包作为 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ipk-mediatek_filogic-${{ env.VERSION }}
          path: openwrt/bin/packages/*/base/*.ipk
